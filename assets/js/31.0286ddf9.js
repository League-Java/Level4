(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{310:function(e,t,a){"use strict";a.r(t);var s=a(14),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("html",[t("h3",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),t("span",{staticStyle:{"background-color":"gray",padding:"10px 24px","margin-bottom":"10px","margin-right":"10px"}},[t("a",{staticStyle:{color:"white","font-size":"14pt","align-items":"center",gap:"10px"},attrs:{href:"https://github.com/League-Java/Level4-Module0/tree/master/src/_04_Maze_Maker/",target:"_blank"}},[t("img",{staticStyle:{width:"20px","vertical-align":"middle"},attrs:{src:e.$withBase("/assets/github-mark.png"),alt:"View Source"}}),e._v("\nView Source\n")])]),e._v(" "),t("p",[e._v("The end goal of this program is to use a depth first search algorithm to generate a random maze of any size.\n"),t("img",{attrs:{height:"300",src:"https://github.com/League-level4/League-level4.github.io/blob/master/maze_complete.png?raw=true",width:"300"}})]),e._v(" "),t("h3",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),t("p",[e._v("First, complete the Maze class.")]),e._v(" "),t("h4",{attrs:{id:"-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")])]),e._v(" "),t("p",[e._v("The result of running the program now gives us only a grid.\n"),t("img",{attrs:{height:"300",src:"https://github.com/League-level4/League-level4.github.io/blob/master/maze_incomplete.png?raw=true",width:"300"}})]),e._v(" "),t("h4",{attrs:{id:"-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[e._v("#")])]),e._v(" "),t("p",[e._v("In the MazeMaker class, complete the generateMaze method, selectNextPath method, the removeWalls method, and the getUnvisitedNeighbors method to generate a random maze.")]),e._v(" "),t("h5",{attrs:{id:"-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-5"}},[e._v("#")])]),e._v(" "),t("p",[e._v("getUnvisitedNeighbors takes in a cell. It returns all the neighbors of the cell who have NOT yet been visited as an ArrayList.\nremoveWalls takes in two cells. It then figures out the relationship between the two cells and sets their shared walls to false. For example, If cell1 is directly above cell2, the removeWalls will set cell1's south wall to false and set cell2's north wall to false.\nselectNextPath is a recursive method that uses the depth first search alogorithm to determine which walls to remove.\ngenerateMaze will create a maze with the given dimensions, select a cell at random, and call the selectNextPath method using that random cell.")]),e._v(" "),t("h4",{attrs:{id:"-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-6"}},[e._v("#")])]),e._v(" "),t("p",[e._v("When the maze maker is generating correct mazes, pick a random cell along the border and remove its exterior wall. This will be the starting point. Then select a random cell along the opposite wall and remove its exterior wall. This will be the finish line.\n"),t("img",{attrs:{height:"300",src:"https://github.com/League-level4/League-level4.github.io/blob/master/maze_with_exit.png?raw=true",width:"300"}})])]),t("p")])}),[],!1,null,null,null);t.default=r.exports}}]);